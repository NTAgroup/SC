unit MainUnit;

interface

uses
  System.SysUtils, System.JSON, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, Google.OAuth, HttpApp,DateUtils,
  FMX.StdCtrls, System.Actions, FMX.ActnList, FMX.Menus, FMX.Layouts, XSuperJson, XSuperObject,
  FMX.Gestures, FMX.Controls.Presentation, FMX.Edit, FMX.ListBox
  {$IFDEF WIN32}
    ,ShellApi, Windows, FMX.Objects, FMX.Calendar, FMX.DateTimeCtrls,
  FMX.WebBrowser;
  {$ElSE}
    ,FMX.Objects, FMX.Calendar, FMX.DateTimeCtrls,FMX.WebBrowser;
  {$ENDIF}

type
  TSCalendar = class(TForm)
    GoogleClient: TOAuthClient;
    RefreshTokenTimer: TTimer;
    MainMenu: TMainMenu;
    AccountItem: TMenuItem;
    SettingsItem: TMenuItem;
    EventsManager: TGestureManager;
    GeustureList: TActionList;
    LeftRightPanning: TAction;
    RightLeftPanning: TAction;
    LoginPanel: TCalloutPanel;
    Login: TButton;
    RememberMeBox: TCheckBox;
    KeyEdit: TEdit;
    LeftPanel: TPanel;
    MainPanel: TPanel;
    ChCaPanel: TCalloutPanel;
    CalendarBox: TComboBox;
    ChCaLabel: TLabel;
    CalendarItem: TMenuItem;
    UpEventsButton: TButton;
    EventBox: TListBox;
    FilterButton: TButton;
    SummaryLabel: TLabel;
    StartTimeEdit: TDateEdit;
    EndTimeEdit: TDateEdit;
    StartTimeLabel: TLabel;
    EndTimeLabel: TLabel;
    EditSaveButton: TButton;
    WebBrowser: TWebBrowser;
    TopDownPanning: TAction;
    DownTopPanning: TAction;
    StyleBook1: TStyleBook;
    TimePanel: TPanel;
    ToLabel: TLabel;
    LeftLabel: TLabel;
    TimeLabel: TLabel;
    ToTimer: TTimer;
    procedure LeftRightPanningExecute(Sender: TObject);
    procedure RightLeftPanningExecute(Sender: TObject);
    procedure EventsControlGesture(Sender: TObject;
      const EventInfo: TGestureEventInfo; var Handled: Boolean);
    procedure LoginClick(Sender: TObject);
    procedure AccountItemClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure CalendarItemClick(Sender: TObject);
    procedure MainPanelClick(Sender: TObject);
    procedure UpEventsButtonClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure EventBoxClick(Sender: TObject);
    procedure TopDownPanningExecute(Sender: TObject);
    procedure DownTopPanningExecute(Sender: TObject);
    procedure WebBrowserShouldStartLoadWithRequest(ASender: TObject;
      const URL: string);
    procedure RefreshTokenTimerTimer(Sender: TObject);
    procedure ToTimerTimer(Sender: TObject);
  private
    { Private declarations }
    procedure UpdateCalendarMenu;
    procedure UpdateCalendarEvents;
    procedure UpdateEventView;
  public
    { Public declarations }
  end;
    //function EncodeURIComponent(const ASrc: string): UTF8String;

var
  SCalendar: TSCalendar;
  CalendarList, EventList: TStringList;
implementation

{$R *.fmx}
{$R *.SmXhdpiPh.fmx ANDROID}

procedure TSCalendar.AccountItemClick(Sender: TObject);
begin
  if not LoginPanel.Visible then
    LoginPanel.Visible := True
  else
    LoginPanel.Visible := False;
end;

procedure TSCalendar.CalendarItemClick(Sender: TObject);
begin
  if not ChCaPanel.Visible then
    ChCaPanel.Visible := True
  else
    ChCaPanel.Visible := False;
end;

procedure TSCalendar.DownTopPanningExecute(Sender: TObject);
begin
  if ChCaPanel.Visible then
    ChCaPanel.Visible := False
  else
  begin
    ToTimer.Enabled := True;
    TimePanel.Visible := True;
  end;
end;

procedure TSCalendar.EventBoxClick(Sender: TObject);
begin
  UpdateEventView;
end;

procedure TSCalendar.EventsControlGesture(Sender: TObject;
  const EventInfo: TGestureEventInfo; var Handled: Boolean);
var
  S: String;
begin
  if GestureToIdent(EventInfo.GestureID, S) then
  begin
   if s = 'sgiLeft' then LeftRightPanning.Execute;
   if s = 'sgiRight' then RightLeftPanning.Execute;
   if s = 'sgiDown' then TopDownPanning.Execute;
   if s = 'sgiTop' then DownTopPanning.Execute;
  end;
end;

procedure TSCalendar.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  GoogleClient.SaveToFile('access.tmp');
end;

procedure TSCalendar.FormCreate(Sender: TObject);
begin
  GoogleClient.LoadFromFile('access.tmp');
  CalendarList := TStringList.Create;
  EventList := TStringList.Create;
  //LoginPanel.Visible := True;
  LoginClick(Self);
end;

procedure TSCalendar.FormDestroy(Sender: TObject);
begin
  CalendarList.Free;
  EventList.Free;
end;

procedure TSCalendar.LeftRightPanningExecute(Sender: TObject);
begin
  LeftPanel.Visible := False;
end;

procedure TSCalendar.LoginClick(Sender: TObject);
begin
  if not KeyEdit.Enabled then
    begin
    {$IFDEF WINDOWS}
      ShellExecute(0, 'open', PChar(GoogleClient.StartConnect), nil, nil, SW_SHOWNORMAL);
      KeyEdit.Enabled := True;
      Login.Text := 'Завершить авторизацию';
    {$ENDIF}
    {$IFDEF ANDROID}
      KeyEdit.Text:='here';
      WebBrowser.Url := GoogleClient.StartConnect;
      WebBrowser.Visible:=true;
      WebBrowser.BringToFront;
    {$ENDIF}
    end
  else
    begin
      KeyEdit.Enabled := False;
      Login.Text := 'Войти';
      try
        GoogleClient.EndConnect(KeyEdit.Text);
        Login.Enabled := False;
        UpdateCalendarMenu;
        LoginPanel.Visible:=False;
        ChCaPanel.Visible:=True;
      except
      end;
    end
end;

procedure TSCalendar.MainPanelClick(Sender: TObject);
begin
  ChCaPanel.Visible := False;
  LoginPanel.Visible := False;
end;

procedure TSCalendar.RefreshTokenTimerTimer(Sender: TObject);
begin
  try
    GoogleClient.RefreshToken;
  except
  end;
end;

procedure TSCalendar.RightLeftPanningExecute(Sender: TObject);
begin
 LeftPanel.Visible := True;;
end;

procedure TSCalendar.TopDownPanningExecute(Sender: TObject);
begin
 if TimePanel.Visible then
 begin
  TimePanel.Visible := False;
  ToTimer.Enabled := False;
 end
 else
  ChCaPanel.Visible := True;
end;

procedure TSCalendar.ToTimerTimer(Sender: TObject);
begin
  if not EventBox.Items[0].IsEmpty then
  begin
   ToLabel.Text := 'To '+EventBox.Items[0];
   EventBox.Selected := EventBox.Items[0];
   UpdateEventView;
   TimeLabel.Text := IntToStr(SecondsBetween(now,StrToDateTime('22.03.2015')) div 3600)
      + ' hours ' + IntToStr(SecondsBetween(now,StrToDateTime('22.03.2015')) mod 3600 div 60)
      + ' minutes ' + IntToStr(SecondsBetween(now,StrToDateTime('22.03.2015')) mod 3600 mod 60)
      + ' seconds';
  end;
end;

procedure TSCalendar.UpdateEventView;
var
  Response: TStringStream;
  JsonObject: ISuperObject;
  RequestString: String;
  FormatSettings: TFormatSettings;
begin
  Response := TStringStream.Create;
  FormatSettings.ShortDateFormat := 'yyyy-mm-dd';
  FormatSettings.DateSeparator := '-';
  FormatSettings.LongTimeFormat := 'hh:nn:ss';
  FormatSettings.TimeSeparator := ':';
  try
    RequestString := 'https://www.googleapis.com/calendar/v3/calendars/'+
      HttpEncode(CalendarList.Values[CalendarBox.Selected.Text])+'/events/'+
      HttpEncode(EventList.Values[EventBox.Selected.Text]);
    GoogleClient.Get(RequestString,Response);
    Response.SaveToFile('eventget.json');
    JsonObject := SO(Response.DataString);
    SummaryLabel.Text := UTF8Decode(JsonObject.S['summary']);
    StartTimeEdit.Date := StrToDateTime(JsonObject.O['start'].S['date'],FormatSettings);
    EndTimeEdit.Date := StrToDate(JsonObject.O['end'].S['date'],FormatSettings);
    finally
      try
        Response.Free;
      except
      end;
    end;
end;

procedure TSCalendar.UpdateCalendarMenu;
var
  Response: TStringStream;
  JSONArray: ISuperArray;
  JsonObject, CalendarInf: ISuperObject;
  i: Integer;
begin
  Response := TStringStream.Create;
  try
    GoogleClient.Get('https://www.googleapis.com/calendar/v3/users/me/calendarList',Response);
    Response.SaveToFile('calendarlist.json');
    JsonObject := SO(Response.DataString);
    JSONArray := JsonObject['items'].AsArray;
    CalendarList.Clear;
    for I := 0 to JSONArray.Length-1 do
    begin
      CalendarInf := JSONArray.O[i];
      CalendarList.Add(UTF8Decode(CalendarInf.S['summary'])+'='+
        UTF8Decode(CalendarInf.S['id']));
      CalendarBox.Items.Add(UTF8Decode(CalendarInf.S['summary']));
    end;
    finally
      try
        Response.Free;
      except
      end;
    end;
end;

procedure TSCalendar.UpdateCalendarEvents;
var
  Response: TStringStream;
  JSONArray: ISuperArray;
  JsonObject, EventInf: ISuperObject;
  i: Integer;
  RequestString: String;
begin
  Response := TStringStream.Create;
  try
    RequestString := 'https://www.googleapis.com/calendar/v3/calendars/'+
      HttpEncode(CalendarList.Values[CalendarBox.Selected.Text])+'/events?singleEvents=true&orderBy=startTime';
    GoogleClient.Get(RequestString,Response);
    Response.SaveToFile('eventlist.json');
    JsonObject := SO(Response.DataString);
    JSONArray := JsonObject['items'].AsArray;
    EventList.Clear;
    EventBox.Clear;
    for I := 0 to JSONArray.Length-1 do
    begin
      EventInf := JSONArray.O[i];
      EventList.Add(UTF8Decode(EventInf.S['summary'])+'='+
        UTF8Decode(EventInf.S['id']));
      EventBox.Items.Add(UTF8Decode(EventInf.S['summary']));
    end;
    finally
      try
        Response.Free;
      except
      end;
    end;
end;

procedure TSCalendar.UpEventsButtonClick(Sender: TObject);
begin
  if CalendarBox.Selected <> nil then
    UpdateCalendarEvents;
end;

procedure TSCalendar.WebBrowserShouldStartLoadWithRequest(ASender: TObject;
  const URL: string);
var
Fstr: String;
begin
  if URL.Contains('code=') then
  begin
    try
      FStr := URL.Substring(pos('code=',URL)+'code='.Length-1);
      ShowMessage(FStr);
      GoogleClient.EndConnect(Fstr);
      ShowMessage('norm');
      Login.Enabled := False;
      WebBrowser.Visible := False;
      UpdateCalendarMenu;
      LoginPanel.Visible:=False;
      ChCaPanel.Visible:=True;
    except
    end;
  end;
end;

// utf8 encoding i dont use it now
{function EncodeURIComponent(const ASrc: string): UTF8String;
const
  HexMap: UTF8String = '0123456789ABCDEF';

  function IsSafeChar(ch: Integer): Boolean;
  begin
    if (ch >= 48) and (ch <= 57) then Result := True    // 0-9
    else if (ch >= 65) and (ch <= 90) then Result := True  // A-Z
    else if (ch >= 97) and (ch <= 122) then Result := True  // a-z
    else if (ch = 33) then Result := True // !
    else if (ch >= 39) and (ch <= 42) then Result := True // '()*
    else if (ch >= 45) and (ch <= 46) then Result := True // -.
    else if (ch = 95) then Result := True // _
    else if (ch = 126) then Result := True // ~
    else Result := False;
  end;
var
  I, J: Integer;
  ASrcUTF8: UTF8String;
begin
  Result := '';    {Do not Localize}

  {ASrcUTF8 := UTF8Encode(ASrc);
  // UTF8Encode call not strictly necessary but
  // prevents implicit conversion warning

  I := 1; J := 1;
  SetLength(Result, Length(ASrcUTF8) * 3); // space to %xx encode every byte
  while I <= Length(ASrcUTF8) do
  begin
    if IsSafeChar(Ord(ASrcUTF8[I])) then
    begin
      Result[J] := ASrcUTF8[I];
      Inc(J);
    end
    else if ASrcUTF8[I] = ' ' then
    begin
      Result[J] := '+';
      Inc(J);
    end
    else
    begin
      Result[J] := '%';
      Result[J+1] := HexMap[(Ord(ASrcUTF8[I]) shr 4) + 1];
      Result[J+2] := HexMap[(Ord(ASrcUTF8[I]) and 15) + 1];
      Inc(J,3);
    end;
    Inc(I);
  end;

  SetLength(Result, J-1);
end;  }

end.
